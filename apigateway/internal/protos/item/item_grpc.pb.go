// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: item.proto

package item

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ItemService_ItemCreate_FullMethodName       = "/ItemService/ItemCreate"
	ItemService_ItemGet_FullMethodName          = "/ItemService/ItemGet"
	ItemService_ItemsGet_FullMethodName         = "/ItemService/ItemsGet"
	ItemService_ItemUpdate_FullMethodName       = "/ItemService/ItemUpdate"
	ItemService_ItemDelete_FullMethodName       = "/ItemService/ItemDelete"
	ItemService_ItemLastInserted_FullMethodName = "/ItemService/ItemLastInserted"
)

// ItemServiceClient is the client API for ItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemServiceClient interface {
	ItemCreate(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ItemGet(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GeneralItem, error)
	ItemsGet(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error)
	ItemUpdate(ctx context.Context, in *GeneralItem, opts ...grpc.CallOption) (*DeleteResponse, error)
	ItemDelete(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ItemLastInserted(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GeneralItem, error)
}

type itemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemServiceClient(cc grpc.ClientConnInterface) ItemServiceClient {
	return &itemServiceClient{cc}
}

func (c *itemServiceClient) ItemCreate(ctx context.Context, in *CreateItemRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ItemService_ItemCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ItemGet(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GeneralItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralItem)
	err := c.cc.Invoke(ctx, ItemService_ItemGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ItemsGet(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemsResponse)
	err := c.cc.Invoke(ctx, ItemService_ItemsGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ItemUpdate(ctx context.Context, in *GeneralItem, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ItemService_ItemUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ItemDelete(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ItemService_ItemDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemServiceClient) ItemLastInserted(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GeneralItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralItem)
	err := c.cc.Invoke(ctx, ItemService_ItemLastInserted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemServiceServer is the server API for ItemService service.
// All implementations must embed UnimplementedItemServiceServer
// for forward compatibility.
type ItemServiceServer interface {
	ItemCreate(context.Context, *CreateItemRequest) (*DeleteResponse, error)
	ItemGet(context.Context, *GetItemRequest) (*GeneralItem, error)
	ItemsGet(context.Context, *GetItemsRequest) (*GetItemsResponse, error)
	ItemUpdate(context.Context, *GeneralItem) (*DeleteResponse, error)
	ItemDelete(context.Context, *GetItemRequest) (*DeleteResponse, error)
	ItemLastInserted(context.Context, *GetItemsRequest) (*GeneralItem, error)
	mustEmbedUnimplementedItemServiceServer()
}

// UnimplementedItemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedItemServiceServer struct{}

func (UnimplementedItemServiceServer) ItemCreate(context.Context, *CreateItemRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemCreate not implemented")
}
func (UnimplementedItemServiceServer) ItemGet(context.Context, *GetItemRequest) (*GeneralItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemGet not implemented")
}
func (UnimplementedItemServiceServer) ItemsGet(context.Context, *GetItemsRequest) (*GetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemsGet not implemented")
}
func (UnimplementedItemServiceServer) ItemUpdate(context.Context, *GeneralItem) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemUpdate not implemented")
}
func (UnimplementedItemServiceServer) ItemDelete(context.Context, *GetItemRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemDelete not implemented")
}
func (UnimplementedItemServiceServer) ItemLastInserted(context.Context, *GetItemsRequest) (*GeneralItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItemLastInserted not implemented")
}
func (UnimplementedItemServiceServer) mustEmbedUnimplementedItemServiceServer() {}
func (UnimplementedItemServiceServer) testEmbeddedByValue()                     {}

// UnsafeItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemServiceServer will
// result in compilation errors.
type UnsafeItemServiceServer interface {
	mustEmbedUnimplementedItemServiceServer()
}

func RegisterItemServiceServer(s grpc.ServiceRegistrar, srv ItemServiceServer) {
	// If the following call pancis, it indicates UnimplementedItemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ItemService_ServiceDesc, srv)
}

func _ItemService_ItemCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ItemCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ItemCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ItemCreate(ctx, req.(*CreateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ItemGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ItemGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ItemGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ItemGet(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ItemsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ItemsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ItemsGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ItemsGet(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ItemUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ItemUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ItemUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ItemUpdate(ctx, req.(*GeneralItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ItemDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ItemDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ItemDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ItemDelete(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemService_ItemLastInserted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemServiceServer).ItemLastInserted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemService_ItemLastInserted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemServiceServer).ItemLastInserted(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemService_ServiceDesc is the grpc.ServiceDesc for ItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ItemService",
	HandlerType: (*ItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ItemCreate",
			Handler:    _ItemService_ItemCreate_Handler,
		},
		{
			MethodName: "ItemGet",
			Handler:    _ItemService_ItemGet_Handler,
		},
		{
			MethodName: "ItemsGet",
			Handler:    _ItemService_ItemsGet_Handler,
		},
		{
			MethodName: "ItemUpdate",
			Handler:    _ItemService_ItemUpdate_Handler,
		},
		{
			MethodName: "ItemDelete",
			Handler:    _ItemService_ItemDelete_Handler,
		},
		{
			MethodName: "ItemLastInserted",
			Handler:    _ItemService_ItemLastInserted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item.proto",
}
